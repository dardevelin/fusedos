/** @file cl_cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.5
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef CL_CMDLINE_H
#define CL_CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CL_CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CL_CMDLINE_PARSER_PACKAGE "cl"
#endif

#ifndef CL_CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CL_CMDLINE_PARSER_PACKAGE_NAME "cl"
#endif

#ifndef CL_CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CL_CMDLINE_PARSER_VERSION "0.00001"
#endif

enum enum_alloc_policy { alloc_policy__NULL = -1, alloc_policy_arg_CORES = 0, alloc_policy_arg_LINEAR, alloc_policy_arg_TWO_THREADS };

/** @brief Where the command line options are stored */
struct cl_cmdline_args
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  int spc0_arg;	/**< @brief SPC number (multiple of 4) (default='0').  */
  char * spc0_orig;	/**< @brief SPC number (multiple of 4) original value given at command line.  */
  const char *spc0_help; /**< @brief SPC number (multiple of 4) help description.  */
  int num_procs_arg;	/**< @brief Number processes (p + n*t <= 64) (default: 1) (default='1').  */
  char * num_procs_orig;	/**< @brief Number processes (p + n*t <= 64) (default: 1) original value given at command line.  */
  const char *num_procs_help; /**< @brief Number processes (p + n*t <= 64) (default: 1) help description.  */
  int num_threads_arg;	/**< @brief Number of threads per process (default: 1) (default='1').  */
  char * num_threads_orig;	/**< @brief Number of threads per process (default: 1) original value given at command line.  */
  const char *num_threads_help; /**< @brief Number of threads per process (default: 1) help description.  */
  int num_memchunks_arg;	/**< @brief Number of memory chunks to use (<= n*t, default: n*t).  */
  char * num_memchunks_orig;	/**< @brief Number of memory chunks to use (<= n*t, default: n*t) original value given at command line.  */
  const char *num_memchunks_help; /**< @brief Number of memory chunks to use (<= n*t, default: n*t) help description.  */
  int shm_arg;	/**< @brief Enable shared memory and optionally specify size (default='-1').  */
  char * shm_orig;	/**< @brief Enable shared memory and optionally specify size original value given at command line.  */
  const char *shm_help; /**< @brief Enable shared memory and optionally specify size help description.  */
  int debug_flag;	/**< @brief Enable debugging (default=off).  */
  const char *debug_help; /**< @brief Enable debugging help description.  */
  int dbg_buffer_flag;	/**< @brief Enable debugging with internal buffer (implies -d) (default=off).  */
  const char *dbg_buffer_help; /**< @brief Enable debugging with internal buffer (implies -d) help description.  */
  int action_tracker_flag;	/**< @brief Enable action tracker (default=off).  */
  const char *action_tracker_help; /**< @brief Enable action tracker help description.  */
  enum enum_alloc_policy alloc_policy_arg;	/**< @brief SPC allocation policy (default='CORES').  */
  char * alloc_policy_orig;	/**< @brief SPC allocation policy original value given at command line.  */
  const char *alloc_policy_help; /**< @brief SPC allocation policy help description.  */
  char * job_mapOrder_arg;	/**< @brief Mapping order of torus dimensions to job ranks (default='ABCDET').  */
  char * job_mapOrder_orig;	/**< @brief Mapping order of torus dimensions to job ranks original value given at command line.  */
  const char *job_mapOrder_help; /**< @brief Mapping order of torus dimensions to job ranks help description.  */
  int job_ranks_arg;	/**< @brief Number of active ranks in the job (defaults to use the whole block).  */
  char * job_ranks_orig;	/**< @brief Number of active ranks in the job (defaults to use the whole block) original value given at command line.  */
  const char *job_ranks_help; /**< @brief Number of active ranks in the job (defaults to use the whole block) help description.  */
  char * job_corner_arg;	/**< @brief Coordinates of the job's corner.  */
  char * job_corner_orig;	/**< @brief Coordinates of the job's corner original value given at command line.  */
  const char *job_corner_help; /**< @brief Coordinates of the job's corner help description.  */
  char * job_shape_arg;	/**< @brief Shape of the job, in the five dimensions.  */
  char * job_shape_orig;	/**< @brief Shape of the job, in the five dimensions original value given at command line.  */
  const char *job_shape_help; /**< @brief Shape of the job, in the five dimensions help description.  */
  int serial_procs_flag;	/**< @brief Run processes serially (default=off).  */
  const char *serial_procs_help; /**< @brief Run processes serially help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int spc0_given ;	/**< @brief Whether spc0 was given.  */
  unsigned int num_procs_given ;	/**< @brief Whether num_procs was given.  */
  unsigned int num_threads_given ;	/**< @brief Whether num_threads was given.  */
  unsigned int num_memchunks_given ;	/**< @brief Whether num_memchunks was given.  */
  unsigned int shm_given ;	/**< @brief Whether shm was given.  */
  unsigned int debug_given ;	/**< @brief Whether debug was given.  */
  unsigned int dbg_buffer_given ;	/**< @brief Whether dbg_buffer was given.  */
  unsigned int action_tracker_given ;	/**< @brief Whether action_tracker was given.  */
  unsigned int alloc_policy_given ;	/**< @brief Whether alloc_policy was given.  */
  unsigned int job_mapOrder_given ;	/**< @brief Whether job_mapOrder was given.  */
  unsigned int job_ranks_given ;	/**< @brief Whether job_ranks was given.  */
  unsigned int job_corner_given ;	/**< @brief Whether job_corner was given.  */
  unsigned int job_shape_given ;	/**< @brief Whether job_shape was given.  */
  unsigned int serial_procs_given ;	/**< @brief Whether serial_procs was given.  */

} ;

/** @brief The additional parameters to pass to parser functions */
struct cl_cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure cl_cmdline_args (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure cl_cmdline_args (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *cl_cmdline_args_purpose;
/** @brief the usage string of the program */
extern const char *cl_cmdline_args_usage;
/** @brief all the lines making the help output */
extern const char *cl_cmdline_args_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cl_cmdline_parser (int argc, char **argv,
  struct cl_cmdline_args *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cl_cmdline_parser_ext() instead
 */
int cl_cmdline_parser2 (int argc, char **argv,
  struct cl_cmdline_args *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cl_cmdline_parser_ext (int argc, char **argv,
  struct cl_cmdline_args *args_info,
  struct cl_cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cl_cmdline_parser_dump(FILE *outfile,
  struct cl_cmdline_args *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cl_cmdline_parser_file_save(const char *filename,
  struct cl_cmdline_args *args_info);

/**
 * Print the help
 */
void cl_cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cl_cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cl_cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cl_cmdline_parser_params_init(struct cl_cmdline_parser_params *params);

/**
 * Allocates dynamically a cl_cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cl_cmdline_parser_params structure
 */
struct cl_cmdline_parser_params *cl_cmdline_parser_params_create(void);

/**
 * Initializes the passed cl_cmdline_args structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cl_cmdline_parser_init (struct cl_cmdline_args *args_info);
/**
 * Deallocates the string fields of the cl_cmdline_args structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cl_cmdline_parser_free (struct cl_cmdline_args *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cl_cmdline_parser_required (struct cl_cmdline_args *args_info,
  const char *prog_name);

extern const char *cl_cmdline_parser_alloc_policy_values[];  /**< @brief Possible values for alloc_policy. */


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CL_CMDLINE_H */
